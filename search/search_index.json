{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Includes here is documentation for a set of PowerShell scripts for use with FSLogix Profile Container, Office 3656 Container and App Masking found in the fslogix repository.</p>"},{"location":"applicationkeys/","title":"Creating FSLogix App Masking rule sets","text":"<p>Scripts here can be used to gather information on applications for creating rule sets for App Masking &amp; Java Control.</p>"},{"location":"applicationkeys/#new-microsoftofficerulesetps1","title":"New-MicrosoftOfficeRuleset.ps1","text":"<p>This script will create an FSLogix App Masking rule set for Office applications. The script requires the <code>FSLogix.PowerShell.Rules</code> PowerShell module. Install this module first with:</p> <pre><code>Install-Module -Name \"FSLogix.PowerShell.Rules\" \n</code></pre> <p><code>New-MicrosoftOfficeRuleset.ps1</code> has been tested with the Microsoft 365 Apps / Office 365 ProPlus and should also work with Office 2019. It may work for Office 2013 / 2016. Download <code>New-MicrosoftOfficeRuleset.ps1</code> from here: https://github.com/aaronparker/fslogix/tree/main/Rules</p>"},{"location":"applicationkeys/#usage","title":"Usage","text":"<p><code>New-MicrosoftOfficeRuleset.ps1</code> should be used to create an App Masking rule set for one application at a time. It will output a rule set files in the default <code>Documents\\FSLogix Rulesets</code>. Adding the <code>-Verbose</code> parameter is recommended to print registry and folder search information to the screen during execution.</p> <p>For example, to create an FSLogix App Masking rule set for Microsoft Visio:</p> <pre><code>.\\New-MicrosoftOfficeRuleset.ps1 -SearchString \"Visio\"\n</code></pre> <p>To create an FSLogix App Masking rule set for Microsoft Project use the following syntax. Note that the word <code>Project</code> is a generic word and therefore the generated rule set file may also include Registry keys and folders that are not specific to Microsoft Project. Manually edit the rule set file once the script completes and remove any items that do not relate directly to Project.</p> <pre><code>.\\New-MicrosoftOfficeRuleset.ps1 -SearchString \"Project\", \"WinProj\"\n</code></pre> <p>To create an FSLogix App Masking rule set for Microsoft Access. Note that the word <code>Access</code> is a generic word and therefore the generated rule set file may also include Registry keys and folders that are not specific to Microsoft Access. Manually edit the rule set file once the script completes and remove any items that do not relate directly to Access.</p> <pre><code>.\\New-MicrosoftOfficeRuleset.ps1 -SearchString \"Access\"\n</code></pre> <p>To create an FSLogix App Masking rule set for Microsoft Publisher. Note that the word <code>Publisher</code> is a generic word and therefore the generated rule set file may also include Registry keys and folders that are not specific to Microsoft Publisher. Manually edit the rule set file once the script completes and remove any items that do not relate directly to Publisher.</p> <pre><code>.\\New-MicrosoftOfficeRuleset.ps1 -SearchString \"Publisher\"\n</code></pre>"},{"location":"applicationkeys/#get-applicationregistrykeyps1","title":"Get-ApplicationRegistryKey.ps1","text":"<p>Returns Registry keys from well known locations that contain application information to return application keys for App Masking rules. An example use case for this would be determining specific locations for an application in a suite with shared components (e.g. Visio as a part of Office 365 ProPlus).</p>"},{"location":"applicationkeys/#installation","title":"Installation","text":"<p><code>Get-ApplicationRegistryKey.ps1</code> can be installed from the PowerShell Gallery with the following command:</p> <pre><code>Install-Script -Name Get-ApplicationRegistryKey\n</code></pre> <p>If you encounter issues installing the script, ensure that PowerShellGet is up to date. On Windows 10 and Windows Server 2016 / 2019 the following commands can be used to update PowerShellGet.</p> <pre><code>Install-Module -Name PowerShellGet -Force\nUpdate-Module -Name PowerShellGet\n</code></pre>"},{"location":"applicationkeys/#usage_1","title":"Usage","text":"<p>The following example will find keys related to Microsoft Visio</p> <pre><code>.\\Get-ApplicationRegistryKey.ps1 -SearchString \"Visio\"\n</code></pre> <p>The script will output a list of keys, similar to the list below, that can then be validated and used in an App Masking rule set for Visio:</p> <pre><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Icad.ViewerDrawing\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ms-visio\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO10\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO20\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.3\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.4\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.5\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.6\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.CustomUI.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.3\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.4\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.5\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.6\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.ExtendedData\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.StencilMacroEnabled.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplateMacroEnabled.15\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplatePackage.16\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.WebDrawing.14\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Workspace.11\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioBridger.Loader\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGFS.Engine\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGProv.Provider\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer.1\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay.1\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator.1\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl.1\n</code></pre>"},{"location":"containercleanup/","title":"Container Cleanup script","text":"<p>Warning</p> <p>This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production.</p>"},{"location":"containercleanup/#profile-capacity-management","title":"Profile Capacity Management","text":"<p>A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance.</p>"},{"location":"containercleanup/#about-remove-containerdataps1","title":"About Remove-ContainerData.ps1","text":"<p><code>Remove-ContainerData</code> is used to delete files and folders in a user's FSLogix Profile Container by mounting the Container and pruning files, thus keeping the Container size to a minimum. The script reads an XML file that defines a list of files and folders to remove from the Container. Actions on a target path can be:</p> <ul> <li>Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder.</li> <li>Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder.</li> <li>Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder.</li> </ul> <p>Supports <code>-WhatIf</code> and <code>-Verbose</code> output and returns a list of files removed from the profile. Add <code>-Verbose</code> will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file.</p> <p>Deleting files from the Container can potentially result in data loss, so testing is advised and the use of <code>-Confirm:$false</code> is required for the script perform a delete.</p> <p>This script depends on the following PowerShell modules:</p> <ul> <li><code>ActiveDirectory</code> - Installed as a feature in Windows Server or via RSAT</li> <li><code>Hyper-V</code> - Installed as a feature in Windows Server or via RSAT</li> <li><code>Fslogix.Powershell.Disk</code> - this module is found here: https://github.com/aaronparker/fslogix/tree/main/Modules/Fslogix.Powershell.Disk</li> </ul> <p><code>Remove-ContainerData.ps1</code> and supporting files are available on in the repository on GitHub.</p>"},{"location":"containercleanup/#usage","title":"Usage","text":"<pre><code>.\\Remove-ContainerData.ps1 -Path \\\\server\\FSLogixContainer -Targets .\\targets.xml\n</code></pre>"},{"location":"containercleanup/#running-remove-containerdataps1","title":"Running Remove-ContainerData.ps1","text":"<p><code>Remove-ContainerData.ps1</code> must be run outside the user session when Profile Containers are not in use. The script will require exclusive access to the Container to mount it with read/write access. <code>Remove-ContainerData.ps1</code> could be run as a schedule task outside of business hours from a management host.</p>"},{"location":"profilecleanup/","title":"Profile Cleanup script","text":"<p>Warning</p> <p>This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production.</p>"},{"location":"profilecleanup/#profile-capacity-management","title":"Profile Capacity Management","text":"<p>A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance.</p>"},{"location":"profilecleanup/#about-remove-profiledataps1","title":"About Remove-ProfileData.ps1","text":"<p><code>Remove-ProfileData.ps1</code> is used to delete files and folders in the user profile to reduce profile size, thus keeping Profile Containers sizes to a minimum. The script runs within the user session and reads an XML file that defines a list of files and folders to remove from the profile.</p> <p>Actions on a target path can be:</p> <ul> <li>Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder.</li> <li>Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder.</li> <li>Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder.</li> </ul> <p>Supports <code>-WhatIf</code> and <code>-Verbose</code> output and returns a list of files removed from the profile. Add <code>-Verbose</code> will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file.</p> <p>Deleting files from the profile can potentially result in data loss, so testing is advised and the use of <code>-Confirm:$False</code> is required for the script perform a delete.</p> <p><code>Remove-ProfileData.ps1</code> and supporting files are available on in the repository on GitHub.</p>"},{"location":"profilecleanup/#usage","title":"Usage","text":"<p>To enable the script to report on what would be removed from user's profile, the following example command would be run in the user's context:</p> <pre><code>.\\Remove-ProfileData.ps1 -Targets .\\targets.xml -WhatIf\n</code></pre> <p>To enable the script to clean up the user's profile, the following example command would be run:</p> <pre><code>.\\Remove-ProfileData.ps1 -Targets .\\targets.xml -Confirm:$False\n</code></pre> <p></p> <p>The age of files specified in the XML can be overridden with the <code>-Override</code> switch. This will remove files of any ages as specificed in the XML targets file.</p> <pre><code>.\\Remove-ProfileData.ps1 -Targets .\\targets.xml -Confirm:$False -Override\n</code></pre> <p>By default, logs are kept for files that are deleted in %LocalAppData% and up to 30 logs will be kept. This number can be changed with the -KeepLog parameter.</p> <pre><code>.\\Remove-ProfileData.ps1 -Targets .\\targets.xml -Confirm:$False -LogPath $env:AppData -KeepLog 7\n</code></pre>"},{"location":"profilecleanup/#running-remove-profiledataps1","title":"Running Remove-ProfileData.ps1","text":"<p><code>Remove-ProfileData.ps1</code> is be run in the user session which could be done in several ways:</p> <ul> <li>A logon script - the script can be run to prune the user profile during login; however, consider potential login storms and impacts on IO and CPU</li> <li>A scheduled task - configure Windows Task Scheduler to run the script as the logged on user. Consider using task schedule trigger and condition properties to stagger the task across multiple users or desktop</li> <li>A logoff script - run the script during user logoff where applications are typically closed and user logoff actions are likely to be staggered</li> </ul>"},{"location":"profilecleanup/#group-policy-logon-logoff","title":"Group Policy Logon / Logoff","text":"<p>To run <code>Remove-ProfileData.ps1</code> in a Group Policy login or logoff script action, create a new GPO (or edit an existing GPO) to add <code>Remove-ProfileData.ps1</code> as a script.</p> <ul> <li>Open the User Configuration / Policies / Windows Settings / Scripts (Logon/Logoff) node. Edit either Logon or Logoff</li> <li>Click the <code>PowerShell Scripts</code> tab and click the Show Files button. Copy <code>Remove-ProfileData.ps1</code> into the location displayed in Explorer.</li> </ul> <p></p> <ul> <li>Edit <code>Remove-ProfileData.ps1</code> and make the following changes:</li> <li>Remove <code>ConfirmImpact = 'High'</code> (approximately line 49, starting with <code>CmdletBinding</code>)</li> <li> <p>Change <code>Mandatory = $True</code> to <code>Mandatory = $False</code> for the <code>Targets</code> parameter (approximately line 53)</p> </li> <li> <p>Copy <code>Targets.xml</code> to a central location. The <code>NETLOGON</code> share is a good candidate to ensure that the file is available centrally</p> </li> </ul> <p></p> <ul> <li>Add <code>Remove-ProfileData.ps1</code> as a script with the <code>-Targets</code> parameter (e.g. <code>-Targets \"\\\\home.stealthpuppy.com\\NETLOGON\\ProfileTargets.xml\"</code>)</li> </ul> <p></p> <p>Link the GPO to an organisational unit containing target user accounts (or use where the GPO is linked to a computer OU with Loopback enabled).</p>"},{"location":"redirectionsxml/","title":"FSLogix Profile Containers Redirections","text":"<p>A list of folder redirections for use with FSLogix Profile Containers and a method for generating the list in the expected XML format. See Controlling the Content of the Profile Container for more details.</p> <p>The list of redirections (<code>Redirections.csv</code>) is hosted here in CSV format so that it can be rendered in a table when viewed on GitHub and to simplify adding to or updating the list.</p>"},{"location":"redirectionsxml/#test-before-implementing-in-production","title":"Test Before Implementing in Production","text":"<p><code>Redirections.csv</code> is not a definitive list of paths to exclude or include in the Profile Container. You should assess each of the paths included in this list for your environment and understand whether a path should be excluded or cleaned up with alternative methods. It is likely that additional paths can be added to the list. With community feedback, this list can be improved.</p> <p>It is also important to understand the performance impacts of implementing exclusions for Profile Containers. Ensure that the <code>redirections.xml</code> that you implement in your environment is well tested before moving into production.</p>"},{"location":"redirectionsxml/#install-the-script","title":"Install the Script","text":"<p>There are two methods for installing the script:</p> <ol> <li>Install from the PowerShell Gallery. This is the preferred method as the installation can be handled directly from Windows PowerShell or PowerShell Core with the following command:</li> </ol> <pre><code>Install-Script -Name ConvertTo-RedirectionsXml\n</code></pre> <ol> <li>Download from the repository. <code>ConvertTo-RedirectionsXml.ps1</code> can be downloaded directly from this repository and saved to a preferred location.</li> </ol>"},{"location":"redirectionsxml/#usage","title":"Usage","text":"<p><code>ConvertTo-RedirectionsXml</code> is used to convert the CSV list into the correct XML format for use with Profile Containers. This script will read the <code>Redirections.csv</code> from GitHub repo and output <code>Redirections.xml</code> locally for use with Profile Containers.</p> <p>To output <code>Redirections.xml</code> to the current folder, just run the script without arguments.</p> <pre><code>ConvertTo-RedirectionsXml\n</code></pre> <p>A custom path can be provided for the output file - for example, the following command will output the file to <code>C:\\Temp\\Redirections.xml</code>:</p> <pre><code>ConvertTo-RedirectionsXml -OutFile C:\\Temp\\Redirections.xml\n</code></pre> <p>If you have saved the script locally instead of installing from the PowerShell Gallery, remember to run the script with the correct syntax:</p> <pre><code>.\\ConvertTo-RedirectionsXml.ps1\n</code></pre>"},{"location":"redirectionsxml/#how-to-contribute","title":"How To Contribute","text":"<p>Contributions to the list of folders to exclude or include from the Profile Container is needed to improve the list. There are two ways to contribute:</p> <ol> <li>Fork the repo, update <code>redirections.csv</code> and create a Pull Request</li> <li>If would prefer not to create a pull request, you can instead create a new issue to request an addition or improvement</li> </ol>"}]}